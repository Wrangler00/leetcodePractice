A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:

Every adjacent pair of words differs by a single letter.
Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.
sk == endWord
Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.

 

Example 1:

Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log","cog"]
Output: 5
Explanation: One shortest transformation sequence is "hit" -> "hot" -> "dot" -> "dog" -> cog", which is 5 words long.
Example 2:

Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log"]
Output: 0
Explanation: The endWord "cog" is not in wordList, therefore there is no valid transformation sequence.
 

Constraints:

1 <= beginWord.length <= 10
endWord.length == beginWord.length
1 <= wordList.length <= 5000
wordList[i].length == beginWord.length
beginWord, endWord, and wordList[i] consist of lowercase English letters.
beginWord != endWord
All the words in wordList are unique.


//cpp my BFS solution

class Solution {
    unordered_map<string,bool> mp;
public:
    int ladderLength(string bw, string ew, vector<string>& wl) {
        int len = bw.length();
        
        for(string &s:wl)   mp[s]=true;
        
        if(mp.find(ew)==mp.end())   return 0;
        queue<pair<string,int>> q;
        q.push({bw,1});
        
        while(!q.empty()){
            string curr = q.front().first;
            int cnt = q.front().second;
            
            q.pop();
            
            if(curr == ew)  return cnt;
            
            for(int i=0;i<len;i++){
                for(int j=0;j<26;j++){
                    if(curr[i]!=('a'+j)){
                        string tmp = curr;
                        tmp[i] = 'a'+j;
                        
                        if(mp.find(tmp)!=mp.end() && mp[tmp]){
                            q.push({tmp,cnt+1});
                            mp[tmp] = false;
                        }
                    }
                }
            }
        }
        
        return 0;
    }
};
