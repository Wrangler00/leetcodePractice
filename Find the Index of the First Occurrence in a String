//link: https://leetcode.com/problems/find-the-index-of-the-first-occurrence-in-a-string/description/

//cpp

Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.

 

Example 1:

Input: haystack = "sadbutsad", needle = "sad"
Output: 0
Explanation: "sad" occurs at index 0 and 6.
The first occurrence is at index 0, so we return 0.
Example 2:

Input: haystack = "leetcode", needle = "leeto"
Output: -1
Explanation: "leeto" did not occur in "leetcode", so we return -1.
 

Constraints:

1 <= haystack.length, needle.length <= 104
haystack and needle consist of only lowercase English characters.


class Solution {
public:
    //O(n+m)
    int z_algo(string &s,string &pattern){
        string make = pattern+"$"+s;
        
        int n = s.length();
        int m = pattern.length();
        int sz = make.length();

        vector<int> z(sz,0);
        
        int l=0,r=0,k;

        for(int i=0;i<sz;i++){
            if(i>r){
                l = r = i;

                while(r<sz && make[r] == make[r-l])
                    ++r;

                z[i] = r-l;
                --r;
            }else{
                k = i-l;

                if(z[k]<r-i+1){
                    z[i] = z[k];
                }else{
                    l = i;

                    while(r<sz && make[r] == make[r-l])
                        ++r;
                    z[i] = r-l;
                    --r;
                }
            }

            if(i>=m-1 && z[i] == m){
                return i-m-1;
            }
        }


        return -1;
    }

    //O((n+m)*q)
    int rabin_karp(string &s,string &pattern){
        int ans;
        int b = 256; //same as set length like 256 ASCII characters
        int n = s.length();
        int m = pattern.length();
        int phash = 0;
        int thash = 0;
        int h = 1;
        int q = INT_MAX;

        for(int i=0;i<m-1;i++)
            h = ((long)h*b)%q;

        for(int i=0;i<m;i++){
            phash = ((long)phash * b + pattern[i]) % q;
            thash = ((long)thash * b + s[i]) % q;
        }

        // cout<<phash<<" "<<thash<<endl;
        for(int i=0,j;i<=n-m;i++){
            if(phash == thash){
                for(j=0;j<m;j++){
                    if(pattern[j] != s[i+j])  break;
                }

                if(j==m){
                    return i;
                }
            }

            if(i<=n-m){
                thash = ((long)b * (thash - s[i] * (long)h) + s[i+m]) % q;

                if(thash<0){
                    thash = thash+q;
                }
            }
        }

        return -1;
    }

    int strStr(string h, string n) {
        bool which = false;
        
        return which ? rabin_karp(h,n) : z_algo(h,n);
    }
};
