You have d dice and each die has f faces numbered 1, 2, ..., f.

Return the number of possible ways (out of fd total ways) modulo 109 + 7 to roll the dice so the sum of the face-up numbers equals target.

 

Example 1:

Input: d = 1, f = 6, target = 3
Output: 1
Explanation: 
You throw one die with 6 faces.  There is only one way to get a sum of 3.
Example 2:

Input: d = 2, f = 6, target = 7
Output: 6
Explanation: 
You throw two dice, each with 6 faces.  There are 6 ways to get a sum of 7:
1+6, 2+5, 3+4, 4+3, 5+2, 6+1.
Example 3:

Input: d = 2, f = 5, target = 10
Output: 1
Explanation: 
You throw two dice, each with 5 faces.  There is only one way to get a sum of 10: 5+5.
Example 4:

Input: d = 1, f = 2, target = 3
Output: 0
Explanation: 
You throw one die with 2 faces.  There is no way to get a sum of 3.
Example 5:

Input: d = 30, f = 30, target = 500
Output: 222616187
Explanation: 
The answer must be returned modulo 10^9 + 7.
 

Constraints:

1 <= d, f <= 30
1 <= target <= 1000

//cpp my solution
//DP solution after working on it for very long time

class Solution {
    int lim,faces;
    vector<vector<long>> dp;
    const long mod = 1e9+7;
public:
    int solve(int diceNo,int sum){
        if(sum<0)   return 0;
        if(diceNo>=lim) return sum==0;
        
        if(dp[diceNo][sum]!=-1)
            return dp[diceNo][sum];
        
        
        long res=0;
        for(int i=1;i<=faces;i++){
            long tmp = solve(diceNo+1, sum-i);
            if(tmp!=-1)  res+=(tmp%mod);
        }
        return dp[diceNo][sum] = res%mod;
    }
    
    int numRollsToTarget(int d, int f, int t) {
        lim=d,faces=f;
        dp = vector<vector<long>>(d+1,vector<long>(t+1,-1));
        solve(0,t);
        return dp[0][t]%mod;
    }
};
