//link:  https://leetcode.com/problems/longest-substring-without-repeating-characters/

Given a string s, find the length of the longest substring without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
Example 4:

Input: s = ""
Output: 0
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.

//cpp my solution:  very fast solution 100% acceptance

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int len = s.length();
        if(len==1)  return 1;
        
        vector<int> arr(257,-1);
        
        int last=0,ans=0,tillnow=0;
        for(int i=0;i<len;i++){
            if(arr[s[i]]==-1){
                arr[s[i]]=i;
                ++tillnow;
                ans=max(ans,tillnow);
            }else{
                tillnow = i-arr[s[i]];
                ans = max(ans,tillnow);
                int ind = arr[s[i]]+1;
                
                for(int j=last;j<=arr[s[i]];j++)
                    arr[s[j]]=-1;
                
                last=ind;
                arr[s[i]] = i;
            }
        }
        
        return ans;
    }
};
