Given an integer array nums of unique elements, return all possible subsets (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
Example 2:

Input: nums = [0]
Output: [[],[0]]
 

Constraints:

1 <= nums.length <= 10
-10 <= nums[i] <= 10
All the numbers of nums are unique.

//cpp backtrack solutionn


class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> ans;
        vector<int> tmp;
        
        backtrack(nums,ans,tmp,0);
        
        return ans;
    }
    
    void backtrack(vector<int> &nums,vector<vector<int>> &ans,vector<int>&tmp,int start){
        ans.push_back(tmp);
        
        for(int i=start;i<nums.size();i++){
            tmp.push_back(nums[i]);
            backtrack(nums,ans,tmp,i+1);
            tmp.pop_back();
        }
    }
};
