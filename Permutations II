Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.

 

Example 1:

Input: nums = [1,1,2]
Output:
[[1,1,2],
 [1,2,1],
 [2,1,1]]
Example 2:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
 

Constraints:

1 <= nums.length <= 8
-10 <= nums[i] <= 10


class Solution {
public:
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        vector<vector<int>> ans;
        vector<int> tmp;
        vector<bool> used(nums.size(),false);
        Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.

 

Example 1:

Input: nums = [1,1,2]
Output:
[[1,1,2],
 [1,2,1],
 [2,1,1]]
Example 2:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
 

Constraints:

1 <= nums.length <= 8
-10 <= nums[i] <= 10

        backtrack(nums,ans,tmp,used);
        return ans;
    }
    
    void backtrack(vector<int> &nums,vector<vector<int>> &ans,vector<int> &tmp,vector<bool> &used){
        if(tmp.size() == nums.size()){
            ans.push_back(tmp);
        }else{
            for(int i=0;i<nums.size();i++){
                if(used[i] || i>0 && nums[i] == nums[i-1] && !used[i-1])    continue;
                used[i]=true;
                tmp.push_back(nums[i]);
                
                backtrack(nums,ans,tmp,used);
                
                tmp.pop_back();
                used[i]=false;
            }
        }
    }
};
