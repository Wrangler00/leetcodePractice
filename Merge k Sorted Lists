You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.

Merge all the linked-lists into one sorted linked-list and return it.

 

Example 1:

Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The linked-lists are:
[
  1->4->5,
  1->3->4,
  2->6
]
merging them into one sorted list:
1->1->2->3->4->4->5->6
Example 2:

Input: lists = []
Output: []
Example 3:

Input: lists = [[]]
Output: []
 

Constraints:

k == lists.length
0 <= k <= 104
0 <= lists[i].length <= 500
-104 <= lists[i][j] <= 104
lists[i] is sorted in ascending order.
The sum of lists[i].length will not exceed 104.

//cpp
//my first try
//using k-size min heap

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        typedef pair<int,ListNode*> pi;
        int k = lists.size();

        if(k == 0)  return nullptr;

        ListNode *root = new ListNode(0);
        ListNode *node = root;
        
        priority_queue<pi,vector<pi>,greater<pi>> pq;

        for(int i=0;i<k;i++){
            if(lists[i]) pq.push({lists[i]->val , lists[i]});
        }

        while(!pq.empty()){
            ListNode *curr = pq.top().second;
            node->next = curr;
            node = node->next;
            pq.pop();

            while(!curr->next && !pq.empty()){
                curr = pq.top().second;
                pq.pop();
                node->next = curr;
                node = node->next;
            }

            if(curr->next){
                pq.push({curr->next->val, curr->next});
            }
        }

        return root->next;
    }
};
