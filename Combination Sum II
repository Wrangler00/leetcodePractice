Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.

Each number in candidates may only be used once in the combination.

Note: The solution set must not contain duplicate combinations.

 

Example 1:

Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]
Example 2:

Input: candidates = [2,5,2,1,2], target = 5
Output: 
[
[1,2,2],
[5]
]
 

Constraints:

1 <= candidates.length <= 100
1 <= candidates[i] <= 50
1 <= target <= 30

//cpp backtrack solution

class Solution {
public:
    vector<vector<int>> combinationSum2(vector<int>& nums, int target) {
        sort(nums.begin(),nums.end());
        
        vector<vector<int>> ans;
        vector<int> tmp;
        backtrack(nums,ans,tmp,target,0);
        
        return ans;
    }
    
    void backtrack(vector<int> &nums,vector<vector<int>> &ans,vector<int> &tmp,int rem,int start){
        if(rem<0)   return;
        else if(rem == 0){
            ans.push_back(tmp);
        }else{
            for(int i=start;i<nums.size();i++){
                if(i>start && nums[i]==nums[i-1])   continue;
                tmp.push_back(nums[i]);
                backtrack(nums,ans,tmp,rem-nums[i],i+1);
                tmp.pop_back();
            }
        }
    }
};
