Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where each path's sum equals targetSum.

A leaf is a node with no children.

 

Example 1:


Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22
Output: [[5,4,11,2],[5,8,4,5]]
Example 2:


Input: root = [1,2,3], targetSum = 5
Output: []
Example 3:

Input: root = [1,2], targetSum = 0
Output: []
 

Constraints:

The number of nodes in the tree is in the range [0, 5000].
-1000 <= Node.val <= 1000
-1000 <= targetSum <= 1000

//cpp my solution using preorder

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    vector<vector<int>> ans;
    int t;
public:
    void preorder(TreeNode* node,vector<int> v,int sum){
        if(!node)   return;
        
        int s = sum+node->val;
        v.push_back(node->val);
        
        if(!node->left && !node->right){
            if(s == t) ans.push_back(v);
            return;
        }
        
        preorder(node->left,v,s);
        preorder(node->right,v,s);
    }
    vector<vector<int>> pathSum(TreeNode* root, int tt) {
        t=tt;
        preorder(root,vector<int>(),0);
        return ans;
    }
};

//solution 2 passing by reference and pop_back()
//for some reason passing by reference solution is much faster

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    vector<vector<int>> ans;
    int t;
public:
    void preorder(TreeNode* node,vector<int> &v,int sum){
        if(!node)   return;
        
        int s = sum+node->val;
        v.push_back(node->val);
        
        if(!node->left && !node->right && s==t)
            ans.push_back(v);
        
        preorder(node->left,v,s);
        preorder(node->right,v,s);
        v.pop_back();
    }
    vector<vector<int>> pathSum(TreeNode* root, int tt) {
        t=tt;
        vector<int> v;
        preorder(root,v,0);
        return ans;
    }
};
