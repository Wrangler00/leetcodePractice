Given a string s, find the longest palindromic subsequence's length in s.

A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.

 

Example 1:

Input: s = "bbbab"
Output: 4
Explanation: One possible longest palindromic subsequence is "bbbb".
Example 2:

Input: s = "cbbd"
Output: 2
Explanation: One possible longest palindromic subsequence is "bb".
 

Constraints:

1 <= s.length <= 1000
s consists only of lowercase English letters.


//cpp
//dp + recursion approach
//top-down approach

class Solution {
    typedef vector<int> vi;
public:
    int solve(string &s, int i, int j, vector<vi> &dp){
        if(i==j)    return 1;
        if(i>j) return 0;

        if(dp[i][j]!=-1)    return dp[i][j];

        if(s[i] == s[j])    
            return dp[i][j] = 2+ solve(s,i+1,j-1,dp);

        return dp[i][j] = max(solve(s,i+1,j,dp),solve(s,i,j-1,dp));
    }

    int longestPalindromeSubseq(string s) {
        int len = s.length();
        vector<vi> dp(len,vi(len,-1));
        return solve(s,0,len-1, dp);
    }
};
