Given an array of n integers nums, a 132 pattern is a subsequence of three integers nums[i], nums[j] and nums[k] such that i < j < k and nums[i] < nums[k] < nums[j].

Return true if there is a 132 pattern in nums, otherwise, return false.

 

Example 1:

Input: nums = [1,2,3,4]
Output: false
Explanation: There is no 132 pattern in the sequence.
Example 2:

Input: nums = [3,1,4,2]
Output: true
Explanation: There is a 132 pattern in the sequence: [1, 4, 2].
Example 3:

Input: nums = [-1,3,2,0]
Output: true
Explanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].
 

Constraints:

n == nums.length
1 <= n <= 2 * 105
-109 <= nums[i] <= 109

//cpp
//my sorted sets solution

class Solution {
public:
    bool find132pattern(vector<int>& nums) {
        int sz = nums.size();
        if(sz<3)    return false;
        vector<int> minElem(sz,0);
        set<int> sortTillNow;

        //find min from 0...i
        minElem[0] = nums[0];
        for(int i=1;i<sz;i++){
            minElem[i] = min(minElem[i-1],nums[i]);
        }
        
        sortTillNow.insert(nums[sz-1]);

        for(int i=sz-2;i>=1;i--){
            auto lowerBound = sortTillNow.lower_bound(nums[i]);
            if(lowerBound != sortTillNow.begin()){
                int low = *(--lowerBound);
                int minVal = minElem[i-1];
                if(minVal<nums[i] && minVal<low) return true;
            }
            
            sortTillNow.insert(nums[i]);
        }

        return false;
    }
};


// solution 2 //optimised
//not my solution
//using stacks

class Solution {
public:
    bool find132pattern(vector<int>& nm) {
        stack<int> st;
        int s3 = INT_MIN;
        int sz = nm.size();
        
        for(int i=sz-1;i>=0;i--){
            if(nm[i]<s3) return true;
            else while(!st.empty() && nm[i]>st.top()){
                s3 = st.top();
                st.pop();
            }
            st.push(nm[i]);
        }
        
        return false;
    }
};
