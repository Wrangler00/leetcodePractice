//link:  https://leetcode.com/problems/shortest-unsorted-continuous-subarray/

Given an integer array nums, you need to find one continuous subarray that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order.

Return the shortest such subarray and output its length.

 

Example 1:

Input: nums = [2,6,4,8,10,9,15]
Output: 5
Explanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.
Example 2:

Input: nums = [1,2,3,4]
Output: 0
Example 3:

Input: nums = [1]
Output: 0
 

Constraints:

1 <= nums.length <= 104
-105 <= nums[i] <= 105


//cpp my solution

class Solution {
public:
    int findUnsortedSubarray(vector<int>& nm) {
        int sz = nm.size();
        
        if(sz==0)   return 0;
        
        int minn=INT_MAX,maxx=nm[0],ans=0;
        int left=-1,right=-1;
        
        for(int i=1;i<sz;i++){
            if(nm[i]<maxx){
                if(nm[i]<minn){
                    int j=i-1;
                    while(j>=0 && nm[j]>nm[i]){
                        --j;
                    }
                    left=j+1;
                    minn=nm[i];
                }
                right=i;
            }else{
                maxx=nm[i];
            }
        }
        
        return right-left==0?0:right-left+1;
    }
};


//cpp more optimized using binary search

static const auto io_sync_off = []()
{
    // turn off sync
    std::ios::sync_with_stdio(false);
    // untie in/out streams
    cin.tie(NULL); return 0;
}();

class Solution {
    vector<int> nmm;
public:
    inline int bins(int r,int val){
        int l=0,mid,ind=0;
        
        while(l<=r){
            mid=(l+r)/2;
            
            if(nmm[mid]>val){
                r=mid-1;
                ind=r;
            }else{
                l=mid+1;
            }
        }
        return ind;
    }
    int findUnsortedSubarray(vector<int>& nm) {
        int sz = nm.size();
        if(sz==0)   return 0;
        nmm = nm;
        
        int minn=INT_MAX,maxx=nm[0];
        int left=-1,right=-2;
        
        for(int i=1;i<sz;i++){
            if(nm[i]<maxx){
                if(nm[i]<minn){
                    left = bins(left==-1?i-1:left,nm[i])+1;
                    minn=nm[i];
                }
                right=i;
            }else
                maxx=nm[i];
        }
        
        return right-left+1;
    }
};
