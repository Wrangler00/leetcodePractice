You are given a string s and an integer k, a k duplicate removal consists of choosing k adjacent and equal letters from s and removing them, causing the left and the right side of the deleted substring to concatenate together.

We repeatedly make k duplicate removals on s until we no longer can.

Return the final string after all such duplicate removals have been made. It is guaranteed that the answer is unique.

 

Example 1:

Input: s = "abcd", k = 2
Output: "abcd"
Explanation: There's nothing to delete.
Example 2:

Input: s = "deeedbbcccbdaa", k = 3
Output: "aa"
Explanation: 
First delete "eee" and "ccc", get "ddbbbdaa"
Then delete "bbb", get "dddaa"
Finally delete "ddd", get "aa"
Example 3:

Input: s = "pbbcggttciiippooaais", k = 2
Output: "ps"
 

Constraints:

1 <= s.length <= 105
2 <= k <= 104
s only contains lowercase English letters.

//cpp
//my solution

class Solution {
public:
    string removeDuplicates(string s, int k) {
        int len = s.length();
        
        string ans = string(1,s[0]);
        
        int i=1,j=0,cnt=1;

        while(i<len){

            if(j<0){
                ans+=s[i];
                cnt=1;
                j=0;
                ++i;
                continue;
            }

            if(s[i] == ans[j]){
                ans+=s[i];
                
                //after removing
                if(cnt == 0){
                    int k = j+1;
                    cnt=1;
                    while(k>0 && ans[k] == ans[k-1]){
                        ++cnt;
                        --k;
                    }
                }else{
                    ++cnt;
                }

                
                if(cnt == k){
                    while(cnt--)    ans.pop_back();
                    cnt=0;
                    j = ans.length()-1;
                }else{
                    ++j;
                }
            }else{
                ans+=s[i];
                ++j;
                cnt=1;
            }
            ++i;
        }

        return ans;
    }
};
